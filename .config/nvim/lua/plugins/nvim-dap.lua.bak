return {
  {
    "mfussenegger/nvim-dap",
    dependencies = {
      "nvim-neotest/nvim-nio",
      "rcarriga/nvim-dap-ui",
      "mfussenegger/nvim-dap-python",
      "theHamsta/nvim-dap-virtual-text",
    },
    config = function()
      local dap = require("dap")
      local dapui = require("dapui")
      local dap_python = require("dap-python")
      
      require("dapui").setup({})
      require("nvim-dap-virtual-text").setup({
        commented = true, -- Show virtual text alongside comment
      })
      
      -- Let nvim-dap-python handle everything automatically
      dap_python.setup("uv")
      
      -- Fix the frozen modules issue
      vim.schedule(function()
        if dap.adapters.python then
          -- Add the frozen modules flag to the existing adapter
          if dap.adapters.python.args then
            -- Insert at the beginning of args
            table.insert(dap.adapters.python.args, 1, '-Xfrozen_modules=off')
          else
            dap.adapters.python.args = {'-Xfrozen_modules=off', '-m', 'debugpy.adapter'}
          end
        end
      end)
      
      -- Fix the configuration names after nvim-dap-python sets them up
      vim.schedule(function()
        if dap.configurations.python then
          for i, config in ipairs(dap.configurations.python) do
            if config.name == "file" then
              config.name = "Launch current file"
            elseif config.name == "file:args" then
              config.name = "Launch with arguments"
            elseif config.name == "attach" then
              config.name = "Attach to remote"
            elseif config.name == "file:doctest" then
              config.name = "Run doctests"
            end
          end
        end
      end)
      
      vim.fn.sign_define("DapBreakpoint", {
        text = "●", -- Use a more visible character
        texthl = "DiagnosticSignError",
        linehl = "",
        numhl = "",
      })
      vim.fn.sign_define("DapBreakpointRejected", {
        text = "○", -- Hollow circle for rejected
        texthl = "DiagnosticSignError", 
        linehl = "",
        numhl = "",
      })
      vim.fn.sign_define("DapStopped", {
        text = "→", -- Arrow for current execution line
        texthl = "DiagnosticSignWarn",
        linehl = "Visual",
        numhl = "DiagnosticSignWarn",
      })
      
      -- Ensure sign column is visible
      vim.opt.signcolumn = "yes"
      
      -- Automatically open/close DAP UI
      dap.listeners.after.event_initialized["dapui_config"] = function()
        dapui.open()
      end
      
      local opts = { noremap = true, silent = true }
      
      -- Toggle breakpoint with better debugging
      vim.keymap.set("n", "<leader>db", function()
        local line = vim.api.nvim_win_get_cursor(0)[1]
        local file = vim.api.nvim_buf_get_name(0)
        print("Setting breakpoint at line " .. line .. " in " .. vim.fn.fnamemodify(file, ':t'))
        
        dap.toggle_breakpoint()
        
        -- Force refresh breakpoint signs
        vim.schedule(function()
          require('dap.breakpoints').refresh()
        end)
        
        -- Check if breakpoint was actually set using the correct API
        local buf = vim.api.nvim_get_current_buf()
        local breakpoints = require('dap.breakpoints').get(buf)
        if breakpoints and next(breakpoints) then
          print("Breakpoints found in buffer:")
          for line_num, bp in pairs(breakpoints) do
            print("  Line " .. line_num)
          end
        else
          print("No breakpoints found in current buffer")
        end
      end, opts)
      
      -- Alternative breakpoint toggle (for testing)
      vim.keymap.set("n", "<leader>bb", function()
        print("bb breakpoint toggle triggered!")
        dap.toggle_breakpoint()
        -- Force refresh signs
        vim.cmd('sign unplace * buffer=' .. vim.api.nvim_get_current_buf())
        require('dap.breakpoints').refresh()
        vim.cmd('redraw!')
        print("bb breakpoint toggle completed!")
      end, opts)
      
      -- Continue / Start
      vim.keymap.set("n", "<leader>dc", function()
        dap.continue()
      end, opts)
      
      -- Step Over
      vim.keymap.set("n", "<leader>do", function()
        dap.step_over()
      end, opts)
      
      -- Step Into
      vim.keymap.set("n", "<leader>di", function()
        dap.step_into()
      end, opts)
      
      -- Step Out
      vim.keymap.set("n", "<leader>dO", function()
        dap.step_out()
      end, opts)
      
      -- Keymap to terminate debugging
      vim.keymap.set("n", "<leader>dq", function()
        require("dap").terminate()
      end, opts)
      
      -- Toggle DAP UI
      vim.keymap.set("n", "<leader>du", function()
        dapui.toggle()
      end, opts)
      
      -- Debug info
      vim.keymap.set("n", "<leader>dD", function()
        print("=== DAP Debug Info ===")
        print("Current filetype:", vim.bo.filetype)
        print("Python executable:", vim.fn.exepath('python'))
        
        if dap.configurations.python then
          print("Python configurations found:", #dap.configurations.python)
          for i, config in ipairs(dap.configurations.python) do
            print("  " .. i .. ": " .. config.name)
          end
        else
          print("No Python configurations found!")
        end
        
        -- Show breakpoints using correct API
        print("\n=== Current Buffer Breakpoints ===")
        local buf = vim.api.nvim_get_current_buf()
        local breakpoints = require('dap.breakpoints').get(buf)
        if breakpoints and next(breakpoints) then
          for line_num, bp in pairs(breakpoints) do
            print("Line " .. line_num .. ": breakpoint set")
          end
        else
          print("No breakpoints in current buffer")
        end
      end, opts)
    end,
  },
}